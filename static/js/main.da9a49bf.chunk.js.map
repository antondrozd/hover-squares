{"version":3,"sources":["redux/selectors.ts","api.ts","redux/actions.ts","components/mode-select/mode-select.component.tsx","components/cell/cell.styled.ts","components/cell/cell.component.tsx","components/grid/grid.styled.ts","components/grid/grid.component.tsx","components/game-field/game-field.styled.ts","components/game-field/game-field.component.tsx","components/logger/logger.styled.ts","components/logger/logger.component.tsx","app.styled.ts","App.tsx","utils.ts","redux/reducer.ts","redux/store.ts","global.styles.ts","index.tsx"],"names":["selectModes","state","modes","selectIsModeSelected","isModeSelected","selectGrid","grid","selectGridSize","Math","sqrt","length","selectActiveCells","reduce","accumulator","cell","active","row","col","push","selectIsStarted","isStarted","selectIsLoading","isLoading","selectError","error","api","_apiBase","a","fetch","this","response","json","FETCH_MODES_REQUEST","FETCH_MODES_SUCCESS","FETCH_MODES_FAILURE","SET_MODE","TOGGLE_START","TOGGLE_CELL_ACTIVE","fetchModesSuccess","type","payload","fetchModesFailure","toggleStart","ModeSelect","useSelector","dispatch","useDispatch","options","Object","keys","map","mode","value","label","replace","placeholder","isSearchable","onChange","selectedMode","getState","gridSize","field","StyledCell","styled","span","Cell","onMouseEnter","toggleCellActive","StyledGrid","div","Grid","Header","StyledSelect","Button","button","primary","danger","disabled","GameField","useEffect","API","getModes","message","onClick","h2","LogList","ul","Message","li","Logger","activeCells","Container","StyledApp","App","computeEmptyGrid","size","toggleGridCell","cellProps","nextGrid","cloneDeep","find","initialState","rootReducer","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middlewares","thunk","store","createStore","applyMiddleware","GlobalStyle","createGlobalStyle","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.da9a49bf.chunk.js","sourcesContent":["import { ICell, IStore } from '../interfaces/common.interfaces'\n\nexport const selectModes = (state: IStore) => state.modes\nexport const selectIsModeSelected = (state: IStore) => state.isModeSelected\nexport const selectGrid = (state: IStore) => state.grid\nexport const selectGridSize = (state: IStore) => Math.sqrt(state.grid.length)\nexport const selectActiveCells = (state: IStore) =>\n  state.grid.reduce((accumulator: Pick<ICell, 'row' | 'col'>[], cell) => {\n    if (cell.active) {\n      const { row, col } = cell\n\n      accumulator.push({ row, col })\n    }\n\n    return accumulator\n  }, [])\nexport const selectIsStarted = (state: IStore) => state.isStarted\nexport const selectIsLoading = (state: IStore) => state.isLoading\nexport const selectError = (state: IStore) => state.error\n","import { IModes } from './interfaces/common.interfaces'\n\nclass API {\n  private _apiBase = 'https://demo1030918.mockable.io/'\n\n  async getModes() {\n    const response = await fetch(this._apiBase)\n    const modes: IModes = await response.json()\n\n    return modes\n  }\n}\n\nconst api = new API()\n\nexport default api\n","import { ThunkAction } from 'redux-thunk'\n\nimport API from '../api'\n\nimport { IModes, IStore, IActions } from '../interfaces/common.interfaces'\n\nexport const FETCH_MODES_REQUEST = 'FETCH_MODES_REQUEST'\nexport const FETCH_MODES_SUCCESS = 'FETCH_MODES_SUCCESS'\nexport const FETCH_MODES_FAILURE = 'FETCH_MODES_FAILURE'\n\nexport const SET_MODE = 'SET_MODE'\nexport const TOGGLE_START = 'TOGGLE_START'\nexport const TOGGLE_CELL_ACTIVE = 'TOGGLE_CELL_ACTIVE'\n\nexport const fetchModes =\n  (): ThunkAction<void, IStore, unknown, IActions> => async (dispatch) => {\n    dispatch({ type: FETCH_MODES_REQUEST })\n\n    try {\n      const modes = await API.getModes()\n\n      dispatch(fetchModesSuccess(modes))\n    } catch (error) {\n      dispatch(fetchModesFailure(error))\n    }\n  }\n\nexport const fetchModesSuccess = (modes: IModes): IActions => ({\n  type: FETCH_MODES_SUCCESS,\n  payload: modes,\n})\n\nexport const fetchModesFailure = (error: Error): IActions => ({\n  type: FETCH_MODES_FAILURE,\n  payload: error,\n})\n\nexport const setMode =\n  (mode: string): ThunkAction<void, IStore, unknown, IActions> =>\n  (dispatch, getState) => {\n    const gridSize = getState().modes![mode].field\n\n    if (getState().isStarted) dispatch(toggleStart())\n    dispatch({ type: SET_MODE, payload: { gridSize } })\n  }\n\nexport const toggleStart = (): IActions => ({\n  type: TOGGLE_START,\n})\n\nexport const toggleCellActive = (row: number, col: number) => ({\n  type: TOGGLE_CELL_ACTIVE,\n  payload: { row, col },\n})\n","import { useDispatch, useSelector } from 'react-redux'\nimport Select, { ValueType } from 'react-select'\n\nimport { selectModes } from '../../redux/selectors'\nimport { setMode } from '../../redux/actions'\n\ninterface IOption {\n  value: string\n  label: string\n}\n\nconst ModeSelect = () => {\n  const modes = useSelector(selectModes)\n\n  const dispatch = useDispatch()\n\n  const handleModeChange = (value: ValueType<IOption, false>) => {\n    const selectedMode = value!.value\n\n    dispatch(setMode(selectedMode))\n  }\n\n  const options: IOption[] = modes\n    ? Object.keys(modes).map((mode) => ({\n        value: mode,\n        label: mode.replace('Mode', ''),\n      }))\n    : []\n\n  return (\n    <Select\n      placeholder=\"Pick mode\"\n      isSearchable={false}\n      options={options}\n      onChange={handleModeChange}\n    />\n  )\n}\n\nexport default ModeSelect\n","import styled from 'styled-components'\n\ninterface IStyledCellProps {\n  active: boolean\n}\n\nexport const StyledCell = styled.span<IStyledCellProps>`\n  border: 1px solid #000;\n  background-color: ${({ active }) => (active ? 'blueviolet' : 'transparent')};\n  transition: background-color 0.1s;\n`\n","import { useSelector, useDispatch } from 'react-redux'\n\nimport { toggleCellActive } from '../../redux/actions'\nimport { selectIsStarted } from '../../redux/selectors'\n\nimport { ICell } from '../../interfaces/common.interfaces'\n\nimport { StyledCell } from './cell.styled'\n\ninterface IProps extends ICell {}\n\nconst Cell = ({ row, col, active }: IProps) => {\n  const isStarted = useSelector(selectIsStarted)\n  const dispatch = useDispatch()\n\n  const handleHover = () => {\n    if (isStarted) {\n      dispatch(toggleCellActive(row, col))\n    }\n  }\n\n  return <StyledCell active={active} onMouseEnter={handleHover} />\n}\n\nexport default Cell\n","import styled from 'styled-components'\n\ninterface IStyledProps {\n  gridSize: number\n}\n\nexport const StyledGrid = styled.div<IStyledProps>`\n  display: grid;\n  grid-template: ${({ gridSize }) =>\n    `repeat(${gridSize}, 1fr) / repeat(${gridSize}, 1fr)`};\n  width: 420px;\n  height: 420px;\n  border: 1px solid #000;\n`\n","import { useSelector } from 'react-redux'\n\nimport Cell from '../cell/cell.component'\nimport { selectGrid, selectGridSize } from '../../redux/selectors'\n\nimport { StyledGrid } from './grid.styled'\n\nconst Grid = () => {\n  const grid = useSelector(selectGrid)\n  const gridSize = useSelector(selectGridSize)\n\n  return (\n    <StyledGrid gridSize={gridSize}>\n      {grid.map((cell) => (\n        <Cell key={`${cell.row}:${cell.col}`} {...cell} />\n      ))}\n    </StyledGrid>\n  )\n}\n\nexport default Grid\n","import styled from 'styled-components'\n\nexport const Header = styled.div`\n  display: flex;\n  justify-content: stretch;\n  margin-bottom: 15px;\n`\n\nexport const StyledSelect = styled.div`\n  flex-grow: 1;\n  margin-right: 20px;\n`\n\ninterface IStyledButtonProps {\n  primary?: boolean\n  danger?: boolean\n}\n\nexport const Button = styled.button<IStyledButtonProps>`\n  min-width: 65px;\n  padding: 10px 15px;\n  border: none;\n  font-family: 'Poppins', sans-serif;\n  text-decoration: none;\n  color: #ffffff;\n  background-color: ${({ primary, danger, disabled }) =>\n    (primary && 'green') || (danger && 'red') || (disabled && 'grey') || ''};\n  text-align: center;\n  transition: all 0.2s;\n  cursor: ${({ disabled }) => (disabled ? 'not-allowed' : 'pointer')};\n`\n","import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport ModeSelect from '../mode-select/mode-select.component'\nimport Grid from '../grid/grid.component'\nimport {\n  selectError,\n  selectIsLoading,\n  selectIsStarted,\n  selectIsModeSelected,\n} from '../../redux/selectors'\nimport { fetchModes, toggleStart } from '../../redux/actions'\n\nimport { Header, Button, StyledSelect } from './game-field.styled'\n\nconst GameField = () => {\n  const isStarted = useSelector(selectIsStarted)\n  const isModeSelected = useSelector(selectIsModeSelected)\n  const error = useSelector(selectError)\n  const isLoading = useSelector(selectIsLoading)\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(fetchModes())\n  }, [dispatch])\n\n  return (\n    <div>\n      {isLoading ? (\n        <>Loading...</>\n      ) : !error ? (\n        <>\n          <Header>\n            <StyledSelect>\n              <ModeSelect />\n            </StyledSelect>\n            <Button\n              primary={isModeSelected && !isStarted}\n              danger={isModeSelected && isStarted}\n              disabled={!isModeSelected}\n              onClick={() => dispatch(toggleStart())}\n            >\n              {!isStarted ? 'Start' : 'Stop'}\n            </Button>\n          </Header>\n          <Grid />\n        </>\n      ) : (\n        <>Error: {error.message}</>\n      )}\n    </div>\n  )\n}\n\nexport default GameField\n","import styled from 'styled-components'\n\nexport const Header = styled.h2`\n  margin: 0;\n  margin-bottom: 15px;\n  font-size: 26px;\n`\n\nexport const LogList = styled.ul`\n  max-height: 423px;\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  overflow-y: scroll;\n`\n\nexport const Message = styled.li`\n  padding: 15px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  border: 1px solid #000;\n`\n","import { useSelector } from 'react-redux'\n\nimport { selectActiveCells } from '../../redux/selectors'\n\nimport { LogList, Message, Header } from './logger.styled'\n\nconst Logger = () => {\n  const activeCells = useSelector(selectActiveCells)\n\n  return (\n    <div>\n      <Header>Hover (active) squares:</Header>\n      <LogList>\n        {activeCells.map(({ row, col }) => (\n          <Message key={`${row}:${col}`}>\n            row {row} col {col}\n          </Message>\n        ))}\n      </LogList>\n    </div>\n  )\n}\n\nexport default Logger\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n  display: flex;\n  width: 100vw;\n  height: 100vh;\n  align-items: center;\n  justify-content: center;\n`\n\nexport const StyledApp = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 777px;\n  min-height: 477px;\n`\n","import GameField from './components/game-field/game-field.component'\nimport Logger from './components/logger/logger.component'\n\nimport { StyledApp, Container } from './app.styled'\n\nconst App = () => {\n  return (\n    <Container>\n      <StyledApp>\n        <GameField />\n        <Logger />\n      </StyledApp>\n    </Container>\n  )\n}\n\nexport default App\n","import { cloneDeep } from 'lodash'\n\nimport { ICell } from './interfaces/common.interfaces'\n\nexport const computeEmptyGrid = (size: number) => {\n  const grid: ICell[] = []\n\n  for (let row = 1; row <= size; row++) {\n    for (let col = 1; col <= size; col++) {\n      grid.push({ row, col, active: false })\n    }\n  }\n\n  return grid\n}\n\nexport const toggleGridCell = (\n  grid: ICell[],\n  cellProps: Pick<ICell, 'row' | 'col'>\n) => {\n  const { row, col } = cellProps\n  const nextGrid = cloneDeep(grid)\n  const cell = nextGrid.find((cell) => cell.row === row && cell.col === col)!\n\n  cell.active = !cell.active\n\n  return nextGrid\n}\n","import {\n  FETCH_MODES_REQUEST,\n  FETCH_MODES_SUCCESS,\n  FETCH_MODES_FAILURE,\n  SET_MODE,\n  TOGGLE_START,\n  TOGGLE_CELL_ACTIVE,\n} from '../redux/actions'\nimport { toggleGridCell, computeEmptyGrid } from '../utils'\n\nimport { IActions, ICell, IModes } from '../interfaces/common.interfaces'\n\ninterface IState {\n  modes: IModes | null\n  grid: ICell[]\n  isModeSelected: boolean\n  isStarted: boolean\n  isLoading: boolean\n  error: Error | null\n}\n\nconst initialState: IState = {\n  modes: null,\n  grid: [],\n  isModeSelected: false,\n  isStarted: false,\n  isLoading: true,\n  error: null,\n}\n\nconst rootReducer = (state = initialState, action: IActions): IState => {\n  switch (action.type) {\n    case FETCH_MODES_REQUEST:\n      return {\n        ...state,\n        isLoading: true,\n        error: null,\n      }\n    case FETCH_MODES_SUCCESS:\n      return {\n        ...state,\n        modes: action.payload,\n        isLoading: false,\n        error: null,\n      }\n    case FETCH_MODES_FAILURE:\n      return {\n        ...state,\n        error: action.payload,\n      }\n    case SET_MODE:\n      return {\n        ...state,\n        isModeSelected: true,\n        grid: computeEmptyGrid(action.payload.gridSize),\n      }\n    case TOGGLE_START:\n      return {\n        ...state,\n        isStarted: !state.isStarted,\n      }\n    case TOGGLE_CELL_ACTIVE:\n      return {\n        ...state,\n        grid: toggleGridCell(state.grid, action.payload),\n      }\n    default:\n      return state\n  }\n}\n\nexport default rootReducer\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport rootReducer from './reducer'\n\nexport type Store = ReturnType<typeof rootReducer>\n\nconst composeEnhancers =\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst middlewares = [thunk]\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(...middlewares))\n)\n\nexport default store\n","import { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: 'Poppins', sans-serif;\n  }\n`\n\nexport default GlobalStyle\n","import * as ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport App from './App'\nimport store from './redux/store'\n\nimport GlobalStyle from './global.styles'\n\nReactDOM.render(\n  <Provider store={store}>\n    <GlobalStyle />\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}